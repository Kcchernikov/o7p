MODULE Sort;

CONST len = 20;

VAR 
  arr: ARRAY len OF INTEGER;
  i : INTEGER;

PROCEDURE BubleSort* (VAR arr: ARRAY OF INTEGER);
VAR i, j, tmp, len: INTEGER;
BEGIN
 len := LEN(arr);
 FOR i := 0 TO len - 1 DO   (* В Обероне правая граница включается *)
  FOR j := 1 TO len - i - 1 DO
    IF arr[j] < arr[j - 1] THEN
      tmp := arr[j];
      arr[j] := arr[j - 1];
      arr[j - 1] := tmp;
    END;
  END;
 END
END BubleSort;

PROCEDURE MergeSort* (VAR arr: ARRAY OF INTEGER; l, r : INTEGER);
VAR i, a, b, cur, m: INTEGER;
  newArr : ARRAY r - l OF INTEGER;
BEGIN
  IF r - l > 1 THEN
    m := (r + l) DIV 2;
    MergeSort(arr, l, m);
    MergeSort(arr, m, r);
    a := l;
    b := m;
    cur := 0;
    FOR i := 0 TO r - l - 1 DO 
      IF a = m THEN
        newArr[i] := arr[b];
        INC(b);
      ELSIF b = r THEN
        newArr[i] := arr[a];
        INC(a);
      ELSIF arr[a] < arr[b] THEN
        newArr[i] := arr[a];
        INC(a);
      ELSE
        newArr[i] := arr[b];
        INC(b);
      END;
    END;

    FOR i := 0 TO r - l - 1 DO
      arr[l + i] := newArr[i];
    END;  
  END;
END MergeSort;

BEGIN
 FOR i := 0 TO len - 1 DO  (* В Обероне правая граница включается *)
  arr[len - i - 1] := i;
 END;

 MergeSort(arr, 0, LEN(arr));

 FOR i := 0 TO len - 1 DO
  PRINT(arr[i]);
  PRINT(" ");
 END;
 PRINT("\n");

END Sort.
