MODULE Init;

IMPORT Log, Draw;

CONST len = 256;

TYPE R = RECORD a: INTEGER END ;
 R0 = RECORD (R) b: INTEGER END ;
 R1 = RECORD (R) b: REAL END ;
 R2 = RECORD (R) b: SET END ;
 P = POINTER TO R;
 P0 = POINTER TO R0;
 P1 = POINTER TO R1;
 P2 = POINTER TO R2;

VAR 
  i, j, v, result: INTEGER;
  value: ARRAY len OF INTEGER;
  isInteger: BOOLEAN;
  p: P;
  p0: P0;

PROCEDURE Log2(VAR x: INTEGER): INTEGER;
 VAR y: INTEGER; (*assume x>0*)
BEGIN 
  y := 0;
 WHILE x > 1 DO x := x DIV 2; y := y + 1 END;
 RETURN y
END Log2;

BEGIN
 FOR i:=1 TO 9 DO
  FOR v:=1 TO 9 DO
   IF i * v < 10 THEN
    j := 1;
    (* Do smt *)
   ELSIF i * v >= 10 THEN
    j := 2;
    (* Do smt *)
   END;
    j := 3;
    (* Do smt *)
  END;
    (* Do smt *)
 END;

 i := LEN(value);
 i := 0;
 WHILE (i + 1 < len) & (value[i] # 10) DO
  value[i] := i;
  i := i + 1;
  (* INC(I) *)
 END;

 REPEAT value[i] := i MOD 10 + len; i := i + 1 UNTIL i = len;

 CASE j OF
   0: result := 2
 | 1: result := 4
 | 2: result := 6
 | 3: result := 8
 END;

 NEW(p0);
 p := p0;

 CASE p OF
  P0: p.b := 10 |
  P1: p.b := 2.5 |
  P2: p.b := {0, 2}
 END;

 result := Log2(result);
 isInteger := result IS INTEGER;

END Init.

